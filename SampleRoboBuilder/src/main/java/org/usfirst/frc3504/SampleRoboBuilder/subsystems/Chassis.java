// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3504.SampleRoboBuilder.subsystems;

import org.usfirst.frc3504.SampleRoboBuilder.RobotMap;
import org.usfirst.frc3504.SampleRoboBuilder.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Chassis extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	private DifferentialDrive drive;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX talonSRX1 = RobotMap.chassisTalonSRX1;
    private final WPI_TalonSRX talonSRX2 = RobotMap.chassisTalonSRX2;
    private final WPI_TalonSRX talonSRX3 = RobotMap.chassisTalonSRX3;
    private final WPI_TalonSRX talonSRX4 = RobotMap.chassisTalonSRX4;
    private final WPI_TalonSRX talonSRX5 = RobotMap.chassisTalonSRX5;
    private final WPI_TalonSRX talonSRX6 = RobotMap.chassisTalonSRX6;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public Chassis() {
    	talonSRX1.setNeutralMode(NeutralMode.Brake);
    	talonSRX2.setNeutralMode(NeutralMode.Brake);
    	talonSRX3.setNeutralMode(NeutralMode.Brake);
    	
    	talonSRX4.setNeutralMode(NeutralMode.Brake);
    	talonSRX5.setNeutralMode(NeutralMode.Brake);
    	talonSRX6.setNeutralMode(NeutralMode.Brake);
    	
    	talonSRX1.setSafetyEnabled(false);
    	talonSRX2.setSafetyEnabled(false);
    	talonSRX3.setSafetyEnabled(false);
    	
    	talonSRX4.setSafetyEnabled(false);
    	talonSRX5.setSafetyEnabled(false);
    	talonSRX6.setSafetyEnabled(false);
    	
    	talonSRX2.follow(talonSRX1, FollowerType.PercentOutput);
    	talonSRX3.follow(talonSRX1, FollowerType.PercentOutput);
    	
    	talonSRX5.follow(talonSRX4, FollowerType.PercentOutput);
    	talonSRX6.follow(talonSRX4, FollowerType.PercentOutput);
    	
    	drive = new DifferentialDrive(talonSRX1,talonSRX4);
    	drive.setSafetyEnabled(false);
    	drive.setDeadband(0.02);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveByArcade());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void driveByArcade(double speed, double rotation) {
    	drive.arcadeDrive(speed, rotation);
    }
    
    public void stop() {
    	drive.stopMotor();
    }

}

