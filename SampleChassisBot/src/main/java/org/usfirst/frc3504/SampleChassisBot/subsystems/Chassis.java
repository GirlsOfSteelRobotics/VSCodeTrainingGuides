// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3504.SampleChassisBot.subsystems;

import org.usfirst.frc3504.SampleChassisBot.SpeedModeTalonSRX;
import org.usfirst.frc3504.SampleChassisBot.RobotMap;
import org.usfirst.frc3504.SampleChassisBot.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.revrobotics.CANSparkMax.IdleMode;

public class Chassis extends Subsystem {
	//probably should come up with better names
    private final SpeedModeTalonSRX talonLeftMaster = new SpeedModeTalonSRX(RobotMap.DRIVE_LEFT_MASTER_TALON, 5000);
    private final SpeedModeTalonSRX talonLeftA = new SpeedModeTalonSRX(RobotMap.DRIVE_LEFT_FOLLOWER_TALON_A, 5000);
   // private final SpeedModeTalonSRX talonLeftB = new SpeedModeTalonSRX(RobotMap.DRIVE_LEFT_FOLLOWER_TALON_B, 5000);
    private final SpeedModeTalonSRX talonRightMaster = new SpeedModeTalonSRX(RobotMap.DRIVE_RIGHT_MASTER_TALON, 5000);
    private final SpeedModeTalonSRX talonRightA = new SpeedModeTalonSRX(RobotMap.DRIVE_RIGHT_FOLLOWER_TALON_A, 5000);
   // private final SpeedModeTalonSRX talonRightB = new SpeedModeTalonSRX(RobotMap.DRIVE_RIGHT_FOLLOWER_TALON_B, 5000);
    
    private DifferentialDrive drive;

    public Chassis() {
    	//This is the constructor
    	
    	//Safety and brakes ----------------------------------
    	talonLeftMaster.setIdleMode(IdleMode.kBrake);
    	talonLeftA.setIdleMode(IdleMode.kBrake);
    	//talonLeftB.setIdleMode(IdleMode.kBrake);
    	
    	talonRightMaster.setIdleMode(IdleMode.kBrake);
    	talonRightA.setIdleMode(IdleMode.kBrake);
    	//talonRightB.setIdleMode(IdleMode.kBrake);
    	
    	//-----------------------------------------------------
    	
    	//reverse();
    	
    	setFollowerMode();
    	
    	//invert(true); //uncomment if needed
		//if needed to invert the talons, do before putting into the drive
		
    	drive = new DifferentialDrive(talonRightMaster, talonLeftMaster);
    	
    	drive.setSafetyEnabled(false);
    	//this line is to set it so the joystick isn't too sensitive to input
    	drive.setDeadband(0.02);
    }

    @Override
    public void initDefaultCommand() {
        setDefaultCommand(new DriveByArcade());

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
    	//if you had something that needed to executed on a periodic sort of time
    	//instead of tiem, this is where you would put the commands
    }
    
    public void driveByTank(double left, double right) {   
    	drive.tankDrive(left, right);
    }
    
    public void driveByArcade(double mag, double rotate) {
    	// speed and how tight the rotation is [-1,1]
    	drive.arcadeDrive(mag, rotate);
    }
    
    public void invert(boolean x) {
    	//if the moters are spinning in opposite directions
    	talonLeftMaster.setInverted(false);
    	talonLeftA.setInverted(false);
    	//talonLeftB.setInverted(false);
    	
    	talonRightMaster.setInverted(x);
    	talonRightA.setInverted(x);
    	//talonRightB.setInverted(x);
    }
    
    public void reverse() {
    	//if the motors are together but completely reversed (do not pair with invert)
    	talonLeftMaster.setInverted(true);
    	//talonLeftB.setInverted(true);
    	talonRightA.setInverted(true);
    	
    	talonLeftA.setInverted(true);
    	talonRightMaster.setInverted(true);
    	//talonRightB.setInverted(true);
    }
    
    public void setFollowerMode() {
    	//follower code
    	talonLeftA.follow(talonLeftMaster);
    	//talonLeftB.follow(talonLeftMaster);
    	
    	talonRightA.follow(talonRightMaster);
    	//talonRightB.follow(talonRightMaster);
    }
    
    public void stop() {
    	drive.stopMotor();
    }


}

